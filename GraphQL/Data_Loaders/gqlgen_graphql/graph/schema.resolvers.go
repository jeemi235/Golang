package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"
	"gqlgen_graphql/dataloaders"
	database "gqlgen_graphql/db"
	"gqlgen_graphql/graph/model"
	"log"
	"net/http"
)

// GetTodos is the resolver for the getTodos field.
func (r *queryResolver) GetTodos(ctx context.Context) ([]*model.Todo, error) {
	db := database.Connect()
	rows, err := db.Query("select * from todo")
	if err != nil {
		log.Println(err)
	}
	defer rows.Close()

	var todos []*model.Todo

	todos = nil

	for rows.Next() {
		var tod model.Todo
		if err := rows.Scan(&tod.ID, &tod.Name); err != nil {
			log.Println(err)
		}
		todos = append(todos, &tod)
	}
	if err := rows.Err(); err != nil {
		log.Println(err)
	}

	// RETURN ALL THE TODOS
	log.Println("Showing list of all todo's")
	return todos, nil
}

// GetAllTodos is the resolver for the getAllTodos field.
func (r *queryResolver) GetAllTodos(ctx context.Context, id string) (*model.Todo, error) {
	todos, err := dataloaders.CtxLoaders(ctx).Todos.Load(id)
	if err != nil {
		log.Println(err)
	}
	//x, _ := strconv.Atoi(id)
	fmt.Println(todos)
	return todos[0], nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

var err error
var ctx context.Context

func DbMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		crConn := database.Connect()
		if err != nil {
			log.Fatal(err)
		}
		ctx = context.WithValue(request.Context(), "crConn", crConn)
		next.ServeHTTP(writer, request.WithContext(ctx))
	})
}
