package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"codecamp/graph/model"
	"context"
	"fmt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input NewUser) (User, error) {   
	var user User   
	count, err := r.users.Find(bson.M{"email": input.Email}).Count()   
	if err != nil {      
		return User{}, err   
	} else if count > 0 {      
		return User{}, errors.New("user with that email already exists")   
		}   
		
	err = r.users.Insert(bson.M{"email": input.Email,})   
	if err != nil {      
		return User{}, err   
	}   
	
	err = r.users.Find(bson.M{"email": input.Email}).One(&user)   
	
	if err != nil {      
		return User{}, err   
	}   
	return user, nil
}


// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// UpdateNotification is the resolver for the updateNotification field.
func (r *mutationResolver) UpdateNotification(ctx context.Context, input *model.UpdateNotification) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateNotification - updateNotification"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
