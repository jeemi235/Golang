package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"errors"
	"fmt"
	"team/graph/model"
	
)

// AddUserToTeam is the resolver for the addUserToTeam field.
func (r *mutationResolver) AddUserToTeam(ctx context.Context, teamID string, name string) (*model.Team, error) {
	team, err := r.getTeamByID(teamID)
	if err != nil {
		return nil, err
	}
	i := 1
	user := model.User{
		ID:   fmt.Sprintf("%d", i),
		Name: name,
	}
	i = i + 1

	team.Members = append(team.Members, &user)

	// Publish the userAdded event to the subscribers
	r.Resolver.userAddedSub.Fire(ctx, user)

	return team, nil
}



type userAddedResolver struct {
	user model.User
}

func (r *userAddedResolver) User() *model.User {
	return &r.user
}

// Teams is the resolver for the teams field.
func (r *queryResolver) Teams(ctx context.Context) ([]*model.Team, error) {
	panic(fmt.Errorf("not implemented: Teams - teams"))
}

// UserAdded is the resolver for the userAdded field.
func (r *subscriptionResolver) UserAdded(ctx context.Context, teamID string) (<-chan *userAddedResolver, error) {
	ch := make(chan *userAddedResolver, 1)
	// Register the channel with the subscription manager
	subID := r.Resolver.userAddedSub.Add(ctx, func(ctx context.Context, payload interface{}) {
		user := payload.(model.User)
		if r.getTeamByID(teamID) != nil {
			ch <- &userAddedResolver{user}
		}
	})
	go func() {
		<-ctx.Done()
		// Unregister the channel when the context is cancelled
		r.Resolver.userAddedSub.Remove(subID)
		close(ch)
	}()
	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
